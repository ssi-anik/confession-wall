type Query {
    userSetting: UserSetting! @guard @field(resolver: "App\\GraphQL\\Queries\\UserSettings")
    myConfessions(page: Int = 1): ConfessionList! @field(resolver: "App\\GraphQL\\Queries\\MyConfession") @guard(with: ["api"])
}

type Mutation {
    login(input: LoginInput! @spread): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\UserLogin")
    createAccount(input: CreateAccountInput! @spread): Message! @field(resolver: "App\\GraphQL\\Mutations\\CreateAccount")
    refreshToken: LoginPayload! @field(resolver: "App\\GraphQL\\Mutations\\RefreshToken") @guard(with: ["api"])

    updateSetting(input: UserSettingInput! @spread): Message! @field(resolver: "App\\GraphQL\\Mutations\\UpdateSetting") @guard(with: ["api"])

    avatar(input: AvatarInput! @spread): Message! @field(resolver: "App\\GraphQL\\Mutations\\AvatarUpdate") @guard(with: ["api"])

    postConfessoin(input: PostConfessionInput! @spread): Message! @field(resolver: "App\\GraphQL\\Mutations\\PostConfession")
    deleteConfession(id: ID!): Message! @field(resolver: "App\\GraphQL\\Mutations\\DeleteConfession") @guard(with: ["api"])

    createUser(name: String): User! @field(resolver: "App\\GraphQL\\Mutations\\CreateUser") @broadcast(subscription: userCreated)
}

type Subscription {
    userCreated(name: String!): User @subscription(class: "App\\GraphQL\\Subscriptions\\UserCreatedSubscription")
}

#import inputs.graphql
#import types.graphql
#import hands_on.graphql
