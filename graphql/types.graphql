"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

interface Message {
    message: String!
}

type LoginPayload {
    access_token: String!
    type: String!
    expires_in: Int!
}

enum MessagePrivacy {
    MSG_FROM_NOBODY @enum(value: 0)
    MSG_FROM_PUBLIC @enum(value: 1)
    MSG_FROM_ANONYMOUS @enum(value: 2)
    MSG_FROM_REGISTERED_USER @enum(value: 3)
}

type UserSetting {
    name: String!
    email: String!
    username: String!
    profile_picture: String!
    message_privacy: MessagePrivacy!
}

type Success implements Message {
    message: String!
    info: [String!]!
}

type Error implements Message{
    message: String!
    reasons: [String!]!
}

type Confession {
    id: ID!
    body: String!
    is_public: Boolean!
    is_anonymous: Boolean!
    poster: String
    posted_at: DateTime!

    receiver: User @belongsTo(relation: "receiver")
}

type User {
    id: ID!
    name: String!
    username: String!
    email: String!
    profile_picture: String!
    is_banned: Boolean!
    message_privacy: MessagePrivacy!

    confessions: [Confession!]! @hasMany
}

type SimplePagination {
    has_next: Boolean!
    has_prev: Boolean!
}

type ConfessionList {
    items: [Confession!]!
    pagination: SimplePagination!
}

type CustomType {
    id: ID!
    name: String!
    internal_argument(text: String): String! @field(resolver: "App\\GraphQL\\Queries\\InternalArgumentResolver")
}

union AuthPayload = LoginPayload | Error
union RegistrationPayload = LoginPayload | Error
